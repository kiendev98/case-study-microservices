version: "2.1"

services:
  product:
    image: case-study-microservices/product-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0,kafka
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_started

  product-p1:
    image: case-study-microservices/product-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1,kafka
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_started

  recommendation:
    image: case-study-microservices/recommendation-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0,kafka
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_started

  recommendation-p1:
    image: case-study-microservices/recommendation-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1,kafka
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_started

  review:
    image: case-study-microservices/review-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0,kafka
    depends_on:
      postgresql:
        condition: service_healthy
      kafka:
        condition: service_started

  review-p1:
    image: case-study-microservices/review-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1,kafka
    depends_on:
      postgresql:
        condition: service_healthy
      kafka:
        condition: service_started

  product-composite:
    image: case-study-microservices/product-composite-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,kafka
    depends_on:
      kafka:
        condition: service_started
      authorization-server:
        condition: service_started

  eureka:
    image: case-study-microservices/eureka-service

  gateway:
    image: case-study-microservices/gateway-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "8443:8443"
    depends_on:
      authorization-server:
        condition: service_started

  authorization-server:
    image: case-study-microservices/authorization-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  mongodb:
    image: mongo:4.4.2
    ports:
      - "27017:27017"
    command: mongod
    healthcheck:
      test: "mongo --eval 'db.stats().ok'"
      interval: 5s
      timeout: 2s
      retries: 60

  postgresql:
    image: postgres:14.0
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=pwd
      - POSTGRES_DB=review-db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 2s
      retries: 60


  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
    depends_on:
      - zookeeper

  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=zookeeper